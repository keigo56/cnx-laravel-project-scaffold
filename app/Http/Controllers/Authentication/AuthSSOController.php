<?php

namespace App\Http\Controllers\Authentication;

use App\Auth\Exceptions\UserMissingRoleException;
use App\Auth\Handlers\SSOAuthHandler;
use App\Http\Controllers\Controller;
use App\Models\User;
use Exception;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Cookie;
use Illuminate\Support\Facades\DB;

class AuthSSOController extends Controller
{
    /*
     * The SSOAuthHandler class is responsible for handling the Azure SSO authentication flow
     * */
    protected SSOAuthHandler $authHandler;

    /*
     * The redirect path is the frontend URL to redirect the user after authentication for token validation
     * */
    protected string $redirectPath;

    public function __construct(SSOAuthHandler $authHandler)
    {
        $this->authHandler = $authHandler;
        $this->authHandler->withRole('admin');

        $this->redirectPath = config('services.azure.frontend_url').'/auth/validate';
    }

    /*
     * Redirects the user to the Azure SSO authorization URL
     * The URL is generated by the AzureSSOService class
     *
     * */
    public function redirect(): RedirectResponse
    {

        $authorizationURL = $this->authHandler
            ->getAuthorizationUrl();

        // Store the state in the session to validate later in the callback
        $state = $this->authHandler->getState();
        session(['oauthState' => $state]);

        return redirect()->away($authorizationURL);
    }

    public function callback(Request $request): RedirectResponse|JsonResponse
    {

        try {

            $accessToken = $this->authHandler
                ->withExpectedState(session('oauthState'))
                ->withReturnedState($request->query('state'))
                ->withAuthorizationCode($request->query('code'))
                ->authenticate();

            session()->forget('oauthState');

            $cookie = Cookie::make('azure_authorization', $accessToken, 5)
                ->withPath('/')
                ->withDomain(config('session.domain'))
                ->withSecure()
                ->withHttpOnly(false); // Set to false to allow JavaScript access (Will be used for access token validation)

            return redirect($this->redirectPath)
                ->withCookie($cookie);

        } catch (UserMissingRoleException $e) {
            return redirect($this->redirectPath.'?error='.$e::ERROR_CODE);
        } catch (Exception $exception) {
            return response()->json([
                'error' => $exception->getMessage(),
            ], 500);
        }
    }

    public function validateToken(Request $request): JsonResponse
    {
        try {

            $user = Auth::user();

            // Invalidate existing sessions for the same user
            // This is to make sure that one user is authenticated at a time
            DB::table('sessions')->where('user_id', $user->id)->delete();

            Auth::guard('web')->login($user);

            $request->session()->regenerate();

            activity()->log('User logged in');

            return response()->json([
                'success' => true,
                'message' => 'Token provided is valid',
            ]);

        } catch (Exception $exception) {
            return response()->json([
                'error' => true,
                'message' => $exception->getMessage(),
            ], 500);
        }
    }

    public function logout(Request $request): JsonResponse
    {
        try {

            $user = User::findOrFail(Auth::user()->id);
            activity()->log('User logged out');

            $user->tokens()->delete();

            Auth::guard('web')->logout();

            $request->session()->invalidate();
            $request->session()->regenerateToken();

            return response()->json([
                'success' => true,
                'message' => 'Logout successful',
            ]);

        } catch (Exception) {
            return response()->json([
                'error' => true,
                'message' => 'Logout failed. Please try again later.',
            ], 500);
        }
    }
}
