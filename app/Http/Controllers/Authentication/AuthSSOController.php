<?php

namespace App\Http\Controllers\Authentication;

use App\Auth\AuthManager;
use App\Auth\Exceptions\UserMissingRoleException;
use App\Auth\Handlers\SSOAuthHandler;
use App\Http\Controllers\Controller;
use Exception;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cookie;

class AuthSSOController extends Controller
{
    /*
     * The AuthManager class is responsible for handling the authentication process
     *
     * It is used to check if the role is configured for SSO authentication
     * and to get the redirect path on the SPA frontend for the role after authentication
     * */
    protected AuthManager $authManager;

    /*
     * The AuthManager class is responsible for handling the authentication process
     *
     * It is used to check if the role is configured for SSO authentication
     * and to get the redirect path on the SPA frontend for the role after authentication
     * */
    protected SSOAuthHandler $authHandler;

    public function __construct(AuthManager $authManager, SSOAuthHandler $authHandler)
    {
        $this->authManager = $authManager;
        $this->authHandler = $authHandler;
    }

    /*
     * Redirects the user to the Azure SSO authorization URL
     * The URL is generated by the AzureSSOService class
     *
     * */
    public function sso_redirect(string $role): RedirectResponse
    {
        /*
         * Check if the role is configured for SSO authentication
         * If not, throw an exception
         * */
        $this->authManager->checkIfAuthFlowExistsForRole('sso', $role);

        $authorizationURL = $this->authHandler
            ->withRole($role)
            ->getAuthrorizationURL();

        // Store the state in the session to validate later in the callback
        $state = $this->authHandler->getState();
        session(['oauthState' => $state]);

        return redirect()->away($authorizationURL);
    }

    public function sso_callback(Request $request): RedirectResponse|JsonResponse
    {

        try {

            $result = $this->authHandler
                ->withExpectedState(session('oauthState'))
                ->withReturnedState($request->query('state'))
                ->withAuthorizationCode($request->query('code'))
                ->authenticate();

            session()->forget('oauthState');

            $access_token = $result['access_token'];
            $redirectPath = $result['redirect_path'];

            $cookie = Cookie::make('azure_authorization', $access_token, 5)
                ->withPath('/')
                ->withDomain(config('session.domain'))
                ->withSecure(true)
                ->withHttpOnly(false);

            return redirect($redirectPath)
                ->withCookie($cookie);

        } catch (UserMissingRoleException $e) {
            return redirect($e->redirectPath.'?error='.$e::ERROR_CODE);
        } catch (Exception $exception) {

            return response()->json([
                'error' => $exception->getMessage(),
            ], 500);
        }
    }
}
